# .github/workflows/main-pipeline.yml

name: CI/CD Pipeline (Master Branch)

on:
  push:
    branches:
      - master # Pipeline ini akan berjalan setiap kali ada push ke branch 'master'
  pull_request:
    branches:
      - master # CI juga akan berjalan untuk setiap Pull Request ke 'master'

# Variabel lingkungan global (jika diperlukan)
# env:
#   SHARED_VAR: 'some-value'

jobs:
  # --- JOB 1: BUILD AND TEST (CI Phase) ---
  build-and-test:
    runs-on: ubuntu-latest
    
    # Variabel lingkungan khusus untuk job ini (opsional)
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PROJECT: pomonade # Ganti dengan nama proyek Docker Hub Anda (misal: 'nama_repo')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint
        # continue-on-error: true # Opsional: uncomment jika Anda ingin pipeline tetap berjalan meskipun linting gagal

      - name: Run tests with Vitest
        run: npm run test
        # Job ini akan gagal jika tes tidak lulus, yang akan mencegah job 'deploy' berjalan

      # --- Langkah Docker Build & Push (dipindahkan ke CI, karena akan digunakan oleh CD) ---
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image to Docker Hub
        env:
          IMAGE_NAME: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_PROJECT }}
          IMAGE_TAG: ${{ github.sha }} # Menggunakan SHA commit sebagai tag unik
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG
          # Tambahkan juga tag 'latest' jika Anda ingin memperbarui tag itu juga
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  # --- JOB 2: DEPLOY (CD Phase) ---
  deploy:
    runs-on: ubuntu-latest
    environment: production # Menunjukkan bahwa ini adalah deployment ke lingkungan produksi
    needs: build-and-test # Job ini HANYA akan berjalan jika job 'build-and-test' SUKSES

    # Variabel lingkungan khusus untuk job ini
    env:
      AWS_REGION: ap-southeast-1 # Ganti dengan region AWS Anda (misal: us-east-1, ap-southeast-2)
      ECS_CLUSTER_NAME: devopspomo-cluster # Nama kluster ECS Anda
      ECS_SERVICE_NAME: devopspomo-service # Nama layanan ECS Anda
      CONTAINER_NAME: devopspomo-container # Nama container di Task Definition Anda
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Mengambil dari GitHub Secret Anda
      DOCKER_PROJECT: pomonade # Nama proyek Docker Hub Anda (harus sama dengan di job CI)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Checkout lagi karena 'deploy' adalah job terpisah yang berjalan di runner baru
        # Jika Anda hanya perlu artefak dari 'build-and-test', Anda bisa menggunakan actions/upload-artifact dan actions/download-artifact

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current ECS task definition
        run: |
          # Perhatikan: Langkah ini mengasumsikan layanan ECS sudah ada.
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_NAME }} \
          --query 'taskDefinition.{family:family,containerDefinitions:containerDefinitions,volumes:volumes,cpu:cpu,memory:memory,networkMode:networkMode,placementConstraints:placementConstraints,requiresCompatibilities:requiresCompatibilities,cpu:cpu,memory:memory,taskRoleArn:taskRoleArn,executionRoleArn:executionRoleArn}' \
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          # Path image menunjuk ke Docker Hub, menggunakan SHA commit yang sama dari job CI
          image: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_PROJECT }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true